// <auto-generated />
namespace Microsoft.EntityFrameworkCore.Internal
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
    using JetBrains.Annotations;

    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static partial class ToolsDotNetStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Tools.DotNet.Properties.ToolsDotNetStrings", typeof(ToolsDotNetStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Build failed on '{projectName}'.
        /// </summary>
        public static string BuildFailed([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BuildFailed", "projectName"), projectName);
        }

        /// <summary>
        /// Could not invoke this command on the startup project '{projectName}'. This version of Entity Framework tools does not support commands on class library projects in ASP.NET Core and .NET Core applications. See http://go.microsoft.com/fwlink/?LinkId=798221 for details and workarounds.
        /// </summary>
        public static string ClassLibrariesNotSupported([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ClassLibrariesNotSupported", "projectName"), projectName);
        }

        /// <summary>
        /// Could not invoke this command on this project. Commands for framework '{framework}' are only supported on Windows.
        /// </summary>
        public static string DesktopCommandsRequiresWindows([CanBeNull] object framework)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DesktopCommandsRequiresWindows", "framework"), framework);
        }

        /// <summary>
        /// Invoking console command in project '{projectName}'
        /// </summary>
        public static string LogBeginDispatch([CanBeNull] object projectName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogBeginDispatch", "projectName"), projectName);
        }

        /// <summary>
        /// Using configuration '{configName}'.
        /// </summary>
        public static string LogUsingConfiguration([CanBeNull] object configName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingConfiguration", "configName"), configName);
        }

        /// <summary>
        /// Using framework '{frameworkName}'.
        /// </summary>
        public static string LogUsingFramework([CanBeNull] object frameworkName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingFramework", "frameworkName"), frameworkName);
        }

        /// <summary>
        /// Using target project '{project}'.
        /// </summary>
        public static string LogUsingTargetProject([CanBeNull] object project)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingTargetProject", "project"), project);
        }

        /// <summary>
        /// Could not invoke this command because the expected dependency context file [{depsJsonFile}] could not be identified.
        /// </summary>
        public static string MissingDepsJsonFile([CanBeNull] object depsJsonFile)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingDepsJsonFile", "depsJsonFile"), depsJsonFile);
        }

        /// <summary>
        /// Setting the data directory to '{path}'.
        /// </summary>
        public static string LogDataDirectory([CanBeNull] object path)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogDataDirectory", "path"), path);
        }

        /// <summary>
        /// Using startup project '{project}'.
        /// </summary>
        public static string LogUsingStartupProject([CanBeNull] object project)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LogUsingStartupProject", "project"), project);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}